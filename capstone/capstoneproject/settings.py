"""
Django settings for capstoneproject project.
Generated by 'django-admin startproject' using Django 4.1.7.
"""
from google.cloud import secretmanager
from pathlib import Path
import os
from django.core.cache import cache
from dotenv import load_dotenv

# Load environment variables from .env file for local development
load_dotenv()


def get_secret(project_id, secret_id, version_id="latest"):
    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"
    response = client.access_secret_version(request={"name": name})
    secret_value = response.payload.data.decode("UTF-8")
    return secret_value


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Determine if we are in production (Google Cloud) or local environment ---
IS_PRODUCTION = os.environ.get('USE_GOOGLE_CLOUD') == 'True'

# --- Secret Key Handling ---
if IS_PRODUCTION:
    SECRET_KEY = get_secret("heritage-hunter-395913", "SECRET_KEY")
else:
    # For local dev, get the key from .env, with a fallback for safety.
    SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-a-default-secret-key-for-local-dev')

# --- Approved Emails (Production Only) ---
if IS_PRODUCTION:
    APPROVED_USER_EMAILS_CSV = get_secret("heritage-hunter-395913", "Approved_user_emails")
    APPROVED_USER_EMAILS = [email.strip() for email in APPROVED_USER_EMAILS_CSV.split(',')]
    cache.set('approved_emails', APPROVED_USER_EMAILS, None)
else:
    APPROVED_USER_EMAILS = []

# --- Google Maps API Key ---
if IS_PRODUCTION:
    GOOGLE_MAPS_API_KEY = get_secret("heritage-hunter-395913", "GOOGLE_MAPS_API_KEY")
else:
    GOOGLE_MAPS_API_KEY = os.environ.get('GOOGLE_MAPS_API_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is True locally, and False in production.
DEBUG = not IS_PRODUCTION

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'heritage-hunter-395913.appspot.com', 'heritage-hunter-395913.nw.r.appspot.com', ]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'capstone',
    'django.contrib.sites',
    'widget_tweaks',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',
]

SITE_ID = 2

# --- Social Auth Credentials ---
if IS_PRODUCTION:
    GOOGLE_CLIENT_ID = get_secret("heritage-hunter-395913", "GOOGLE_CLIENT_ID")
    GOOGLE_CLIENT_SECRET = get_secret("heritage-hunter-395913", "GOOGLE_CLIENT_SECRET")
    MICROSOFT_CLIENT_ID = get_secret("heritage-hunter-395913", "MICROSOFT_CLIENT_ID")
    MICROSOFT_SECRET = get_secret("heritage-hunter-395913", "MICROSOFT_SECRET")
else:
    GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
    GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')
    MICROSOFT_CLIENT_ID = os.environ.get('MICROSOFT_CLIENT_ID')
    MICROSOFT_SECRET = os.environ.get('MICROSOFT_SECRET')

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'APP': { 'client_id': GOOGLE_CLIENT_ID, 'secret': GOOGLE_CLIENT_SECRET, },
        'OAUTH_PKCE_ENABLED': True,
    },
    'microsoft': {
        'APP': { 'client_id': MICROSOFT_CLIENT_ID, 'secret': MICROSOFT_SECRET, },
    },
}

# --- Email Settings ---
if IS_PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.sendgrid.net'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'apikey'
    EMAIL_HOST_PASSWORD = get_secret("heritage-hunter-395913", "heritage_hunter_sendgrid_email_api")
else:
    # For local development, emails will be printed to the console.
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEFAULT_FROM_EMAIL = 'techsavhay@gmail.com'
SERVER_EMAIL = DEFAULT_FROM_EMAIL
ADMINS = [('Ian Hay', 'techsavhay@gmail.com')]

LOGIN_REDIRECT_URL = 'index'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'capstoneproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'capstoneproject.wsgi.application'

# --- Database Settings ---
print("Using Google Cloud:", IS_PRODUCTION)

if IS_PRODUCTION:
    # Google Cloud Production/Staging settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'postgres', # As configured in Cloud SQL
            'USER': get_secret("heritage-hunter-395913", "DB_USER"),
            'PASSWORD': get_secret("heritage-hunter-395913", "DB_PASSWORD"),
            # Assumes CLOUD_SQL_CONNECTION_NAME is set in app.yaml env_variables
            'HOST': f"/cloudsql/{os.environ.get('CLOUD_SQL_CONNECTION_NAME')}",
        }
    }
else:
    # Local development settings (reads from .env file)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth Settings
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD="username_email"

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I1N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'allauth': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'your_project': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}