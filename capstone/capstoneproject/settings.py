"""
Django settings for capstoneproject project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from google.cloud import secretmanager
from pathlib import Path
import os
from django.core.cache import cache


def get_secret(project_id, secret_id, version_id="latest"):
    #print(f"settings get_secret function called for {secret_id}")  # Debugging line to indicate function call
    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"
    response = client.access_secret_version(request={"name": name})
    secret_value = response.payload.data.decode("UTF-8")
    #print(f"settings.py etrieved secret {secret_id}: {secret_value}")  # Debugging line to print the retrieved secret
    return secret_value





# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("heritage-hunter-395913", "SECRET_KEY")

#Calls get secret to get approved emails
APPROVED_USER_EMAILS_CSV = get_secret("heritage-hunter-395913", "Approved_user_emails")

# Convert the approved user emails CSV string into a list and trim whitespaces
APPROVED_USER_EMAILS = [email.strip() for email in APPROVED_USER_EMAILS_CSV.split(',')]


# Initialize the cache
cache.set('approved_emails', APPROVED_USER_EMAILS, None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1','http://127.0.0.1:8000/', 'heritage-hunter-395913.appspot.com', 'heritage-hunter-395913.nw.r.appspot.com', ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'capstone',
    'django.contrib.sites',
    'widget_tweaks',

    #for all auth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',
]
# site 1 = localhost, site 2 = http://127.0.0.1:8000/, site 3 = Heritage Hunter
SITE_ID = 2


GOOGLE_CLIENT_ID = get_secret("heritage-hunter-395913", "GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = get_secret("heritage-hunter-395913", "GOOGLE_CLIENT_SECRET")



MICROSOFT_CLIENT_ID = get_secret("heritage-hunter-395913", "MICROSOFT_CLIENT_ID")
MICROSOFT_SECRET = get_secret("heritage-hunter-395913", "MICROSOFT_SECRET")

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
        },
        'OAUTH_PKCE_ENABLED': True,
    },
    'microsoft': {
        'APP': {
            'client_id': MICROSOFT_CLIENT_ID,
            'secret': MICROSOFT_SECRET,
        },
        #'REDIRECT_URI': os.environ.get(
            #'SOCIAL_AUTH_REDIRECT_URI',
            #'http://localhost:8000/accounts/microsoft/login/callback/'
        #),
    },
}


#EMAIL VERIFICATION
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey'  # This is literally the string 'apikey'
EMAIL_HOST_PASSWORD = get_secret("heritage-hunter-395913", "heritage_hunter_sendgrid_email_api")
DEFAULT_FROM_EMAIL = 'techsavhay@gmail.com'  # Use your own email address



LOGIN_REDIRECT_URL = 'index'



# Use the environment variable if it exists, otherwise use a default URI



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'capstoneproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'capstoneproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# Get the value of the environment variable 'USE_GOOGLE_CLOUD'
use_google_cloud = os.environ.get('USE_GOOGLE_CLOUD', 'False') == 'True'

# print statement
print("Using Google Cloud:", use_google_cloud)

if use_google_cloud:
    # Google Cloud database settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'postgres',
            'USER': get_secret("heritage-hunter-395913", "DB_USER"),
            'PASSWORD': get_secret("heritage-hunter-395913", "DB_PASSWORD"),
            'HOST': os.environ.get('DB_HOST', '127.0.0.1'), # Changed this line from '/cloudsql/heritage-hunter-395913:europe-west2:pub-database-instance-1',
            'PORT': '5432',
        }
    }
else:
    # Local PostgreSQL database settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': '31_10_23_local_Database',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': '192.168.0.124',
            'PORT': '5432',
            'OPTIONS': {
                'sslmode': 'disable',
            },
        }
    }


AUTHENTICATION_BACKENDS = [
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

#email validation
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400  # 1 day in seconds
ACCOUNT_EMAIL_REQUIRED = True


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
